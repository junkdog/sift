package sift.core.api

/** Enum representing Java modifiers. */
@Suppress("EnumEntryName")
enum class Modifiers(val flag: Int) {

    /** Accessible from any class. */
    acc_public(0x0001),

    /** Accessible only from within the same class. */
    acc_private(0x0002),

    /** Accessible within the same package or subclass. */
    acc_protected(0x0004),

    /** Belongs to the class, not an instance of the class. */
    acc_static(0x0008),

    /** Cannot be modified after initialization. */
    acc_final(0x0010),

    /** Exists for backward compatibility for code compiled by Sun's older compilers. */
    acc_super(0x0020),

    /** Accessible only by one thread at a time. */
    acc_synchronized(0x0020),

    /** Open module which can be used by any module. */
    acc_open(0x0020),

    /** Indicates a module dependency. */
    acc_transitive(0x0020),

    /** Can be changed unexpectedly by other threads. */
    acc_volatile(0x0040),

    /** Used in method signature during type erasure. */
    acc_bridge(0x0040),

    /** Specifies that a module is read in `--limit-modules` mode. */
    static_acc_phase(0x0040),

    /** Variable-length argument list for a method. */
    acc_varargs(0x0080),

    /** Field is not serialized. */
    acc_transient(0x0080),

    /** Implemented in platform-specific code. */
    acc_native(0x0100),

    /** Interface definition. */
    acc_interface(0x0200),

    /** Cannot be instantiated directly, must be subclassed. */
    acc_abstract(0x0400),

    /** Strict floating-point arithmetic. */
    acc_strict(0x0800),

    /** Not part of the source code, generated by compiler. */
    acc_synthetic(0x1000),

    /** Annotation definition. */
    acc_annotation(0x2000),

    /** Enum definition. */
    acc_enum(0x4000),

    /** Indicates mandated API elements. */
    acc_mandated(0x8000),

    /** Module definition. */
    acc_module(0x8000);

    override fun toString(): String = name.lowercase()

    companion object {
        internal fun bitmaskOf(
            modifiers: Iterable<Modifiers>
        ): Int = modifiers.fold(0) { acc, m -> acc or m.flag }
    }
}